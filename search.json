[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). maybe: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {maybe: What the Package Does (One Line, Title Case)},   author = {Andrew McNeil},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"armcn/maybe\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"What the Package Does (One Line, Title Case)","text":"Maybe values can used model computations may fail undefined outputs. example, dividing zero mathematically undefined many programming languages, including R, return infinity. can cause unexpected problems later program. can use maybe value make safe divide function. time 2 / 2 returns Just 1 2 / 0 returns Nothing. two possibly values maybe value. can Just value, can Nothing (absence value). order use value another computation, first need specify happen function returns Nothing. can done using with_default function. function return value contained Just, Nothing return default. gets interesting chain maybe values together. Instead use with_default every time use function produces maybe values, can chained with_default needs called end. example divide two numbers get absolute value. accomplished map_maybe function. wanted chain multiple “safe” functions (functions return maybe values) together? use and_then. First let’s define two “safe” functions call one . Functions can also converted “safe” functions another way. Instead rewriting function can wrap maybe. alter function return Nothing error warning can optionally provide predicate function (function returns TRUE FALSE) assert something output. example functions made “safe” maybe. Combine multiple predicates functions. use predefined combinations like not_undefined checks output NULL, NA, NaN, infinte.","code":"1 / 0 #> [1] Inf library(maybe)  safe_divide <- function(a, b) {   if (b == 0) nothing() else just(a / b) }  safe_divide(2, 2) #> Just #> [1] 1 safe_divide(2, 0) #> Nothing safe_divide(2, 2) |> with_default(0) #> [1] 1 safe_divide(2, 0) |> with_default(0) #> [1] 0 safe_divide(-2, 2) |> map_maybe(abs) |> with_default(0) #> [1] 1 safe_divide(-2, 0) |> map_maybe(abs) |> with_default(0) #> [1] 0 safe_mean <- function(a) {   if (length(a) == 0L) nothing() else just(mean(a)) }  safe_sqrt <- function(a) {   if (a == -1) nothing() else just(sqrt(a)) }  seq(1, 10) |> safe_mean() |> and_then(safe_sqrt) |> with_default(0) #> [1] 2.345208 safe_mean <- maybe(mean, assert = not_nan)  safe_sqrt <- maybe(sqrt, assert = not_infinite)  seq(1, 10) |> safe_mean() |> and_then(safe_sqrt) |> with_default(0) #> [1] 2.345208  maybe(mean)(\"hello\") #> Nothing safe_mean <- maybe(mean, assert = and(not_nan, not_na))  safe_mean(1:10) #> Just #> [1] 5.5 safe_mean <- maybe(mean, assert = not_undefined)  safe_mean(c(NA, 1, 2)) #> Nothing"}]
