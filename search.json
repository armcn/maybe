[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 maybe authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). maybe: Maybe Monad. https://github.com/armcn/maybe, https://armcn.github.io/maybe/.","code":"@Manual{,   title = {maybe: The Maybe Monad},   author = {Andrew McNeil},   year = {2022},   note = {https://github.com/armcn/maybe, https://armcn.github.io/maybe/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"The Maybe Monad","text":"maybe type represents possibility value nothing. often used instead throwing error returning undefined value like NA NULL. advantage using maybe type functions work composable require developer explicitly acknowledge potential absence value, helping avoid unexpected behavior.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Maybe Monad","text":"can install released version maybe CRAN : development version GitHub :","code":"install.packages(\"maybe\") # install.packages(\"remotes\") remotes::install_github(\"armcn/maybe\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"The Maybe Monad","text":"following example shows maybe package can used create safe data processing pipeline.","code":"library(dplyr, warn.conflicts = FALSE) library(maybe)  safe_filter <- maybe(filter, ensure = not_empty) safe_mean <- maybe(mean, ensure = not_undefined) safe_pull <- maybe(pull)  mean_mpg_of_cyl <- function(.cyl) {   mtcars %>%      safe_filter(cyl == .cyl) %>%      and_then(safe_pull, mpg) %>%      and_then(safe_mean) %>%      with_default(0) }  mean_mpg_of_cyl(8L) #> [1] 15.1  mean_mpg_of_cyl(100L) #> [1] 0"},{"path":"/index.html","id":"the-maybe-type","dir":"","previous_headings":"","what":"The maybe type","title":"The Maybe Monad","text":"Maybe values can used model computations may fail undefined outputs. example, dividing zero mathematically undefined many programming languages, including R, infinity returned. properly accounted may cause unexpected behavior later program. maybe type can used improve safety divide function. 10 %//% 2 returns Just 5 10 %//% 0 returns Nothing. two possible values maybe type. can Just value, can Nothing, absence value. value used input another function need specify happen function returns Nothing. can done using with_default function. function return value contained Just, Nothing return default. Think maybe value container. container can Just value Nothing. use contained value regular R function need unwrap first.","code":"`%//%` <- function(a, b) {   if (b == 0) nothing() else just(a / b) }  10 / 2 #> [1] 5 10 %//% 2 #> Just #> [1] 5  10 / 0 #> [1] Inf 10 %//% 0 #> Nothing 10 %//% 2 #> Just #> [1] 5 10 %//% 2 %>% with_default(0) #> [1] 5  10 %//% 0 #> Nothing 10 %//% 0 %>% with_default(0) #> [1] 0"},{"path":"/index.html","id":"chaining-maybe-values","dir":"","previous_headings":"","what":"Chaining maybe values","title":"The Maybe Monad","text":"may seem tedious rewrite functions return maybe values specify default value time. maybe chaining functions become useful. maybe_map allows regular R function evaluated maybe value. maybe_map, often called fmap languages, reaches maybe value, applies function value, re-wraps result maybe. input Just value, return value maybe_map also Just. Nothing return value Nothing. wanted chain multiple “safe” functions (functions return maybe values) together? function and_then, often called bind languages, works similarly maybe_map except function provided must return maybe value.","code":"safe_max <- function(a) {   if (length(a) == 0L) nothing() else just(max(a)) }  just(9) %>% maybe_map(sqrt) #> Just #> [1] 3 nothing() %>% maybe_map(sqrt) #> Nothing  safe_max(1:9) %>% maybe_map(sqrt) #> Just #> [1] 3 safe_max(integer(0)) %>% maybe_map(sqrt) #> Nothing safe_sqrt <- function(a) {   if (a < 0) nothing() else just(sqrt(a)) }  just(9) %>% and_then(safe_sqrt) nothing() %>% and_then(safe_sqrt) #> Nothing  safe_max(1:9) %>% and_then(safe_sqrt) safe_max(integer()) %>% and_then(safe_sqrt) #> Nothing"},{"path":"/index.html","id":"creating-maybe-functions","dir":"","previous_headings":"","what":"Creating maybe functions","title":"The Maybe Monad","text":"maybe package provides another way create functions return maybe values. Instead rewriting function return maybe values can wrap maybe function. modify function return Nothing error warning. predicate function (function returns TRUE FALSE) can provided argument assert something return value. predicate returns TRUE Just value returned, otherwise Nothing. pattern modifying function maybe function setting default value common shortcut, perhaps. default value set default parameter. function always return regular R value, never maybe values.","code":"safe_max <- maybe(max) safe_sqrt <- maybe(sqrt, ensure = not_infinite)  safe_max(1:9) %>% and_then(safe_sqrt) safe_max(\"hello\") %>% and_then(safe_sqrt) safe_max <- perhaps(max, ensure = is.numeric, default = 0)  safe_max(1:9) %>% sqrt() #> [1] 3 safe_max(\"hello\") %>% sqrt() #> [1] 0"},{"path":"/index.html","id":"predicates","dir":"","previous_headings":"","what":"Predicates","title":"The Maybe Monad","text":"Multiple predicates can combined /functions. Predefined combinations also provided not_undefined, ensures output NULL, NA, NaN, -Inf, Inf.","code":"safe_sqrt <- maybe(mean, ensure = and(not_infinite, not_empty))  safe_sqrt(9) #> Just #> [1] 9 safe_mean <- maybe(mean, ensure = not_undefined)  safe_mean(c(1, 2, 3)) #> Just #> [1] 2 safe_mean(c(NA, 2, 3)) #> Nothing"},{"path":"/index.html","id":"comparing-values","dir":"","previous_headings":"","what":"Comparing values","title":"The Maybe Monad","text":"Two maybe values can compared using maybe_equal. return TRUE identical Just values values Nothing. check maybe value contains specific value use maybe_contains.","code":"maybe_equal(nothing(), nothing()) #> [1] TRUE maybe_equal(just(1), just(1)) #> [1] TRUE maybe_equal(just(\"hello\"), nothing()) #> [1] FALSE  just(list(1, 2, 3)) %>% maybe_contains(list(1, 2, 3)) #> [1] TRUE nothing() %>% maybe_contains(list(1, 2, 3)) #> [1] FALSE"},{"path":"/index.html","id":"function-names","dir":"","previous_headings":"","what":"Function names","title":"The Maybe Monad","text":"names functions maybe_map, and_then, maybe_flatten, with_default different traditional names used functions functional programming languages. like use traditional names aliases provided. fmap == maybe_map bind == and_then join == maybe_flatten from_maybe == with_default","code":""},{"path":"/index.html","id":"inspiration--prior-work","dir":"","previous_headings":"","what":"Inspiration / Prior work","title":"The Maybe Monad","text":"monads R package rmonad R package Maybe Monad R blog post Elm Maybe package","code":""},{"path":"/reference/and.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine predicate functions to check if all are TRUE — and","title":"Combine predicate functions to check if all are TRUE — and","text":"Combine predicate functions check TRUE","code":""},{"path":"/reference/and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine predicate functions to check if all are TRUE — and","text":"","code":"and(...)"},{"path":"/reference/and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine predicate functions to check if all are TRUE — and","text":"... Predicate functions","code":""},{"path":"/reference/and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine predicate functions to check if all are TRUE — and","text":"predicate function","code":""},{"path":"/reference/and.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine predicate functions to check if all are TRUE — and","text":"","code":"and(not_null, not_na)(1) #> [1] TRUE and(not_null, not_na)(NULL) #> [1] FALSE"},{"path":"/reference/and_then.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a maybe returning function on a maybe value — and_then","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"Evaluate maybe returning function maybe value","code":""},{"path":"/reference/and_then.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"","code":"and_then(.m, .f, ...)  bind(.m, .f, ...)"},{"path":"/reference/and_then.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a maybe returning function on a maybe value — and_then","text":".m maybe value .f maybe returning function apply maybe value ... Named arguments function .f","code":""},{"path":"/reference/and_then.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"maybe value","code":""},{"path":"/reference/and_then.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"","code":"safe_sqrt <- maybe(sqrt, ensure = not_infinite)  just(9) %>% and_then(safe_sqrt) just(-1) %>% and_then(safe_sqrt) nothing() %>% and_then(safe_sqrt) #> Nothing"},{"path":"/reference/filter_justs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter and unwrap a list of 'Just' values — filter_justs","title":"Filter and unwrap a list of 'Just' values — filter_justs","text":"Filter unwrap list 'Just' values","code":""},{"path":"/reference/filter_justs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter and unwrap a list of 'Just' values — filter_justs","text":"","code":"filter_justs(.l)  cat_maybes(.l)"},{"path":"/reference/filter_justs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter and unwrap a list of 'Just' values — filter_justs","text":".l List maybe values","code":""},{"path":"/reference/filter_justs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter and unwrap a list of 'Just' values — filter_justs","text":"list values","code":""},{"path":"/reference/filter_justs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter and unwrap a list of 'Just' values — filter_justs","text":"","code":"filter_justs(list(just(1), nothing(), just(\"a\"))) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] \"a\" #>"},{"path":"/reference/filter_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a function over a list and filter only 'Just' values — filter_map","title":"Map a function over a list and filter only 'Just' values — filter_map","text":"Map function list filter 'Just' values","code":""},{"path":"/reference/filter_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a function over a list and filter only 'Just' values — filter_map","text":"","code":"filter_map(.l, .f)"},{"path":"/reference/filter_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a function over a list and filter only 'Just' values — filter_map","text":".l List values .f maybe returning function apply maybe values ... Named arguments function .f","code":""},{"path":"/reference/filter_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a function over a list and filter only 'Just' values — filter_map","text":"list values","code":""},{"path":"/reference/filter_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a function over a list and filter only 'Just' values — filter_map","text":"","code":"filter_map(list(-1, 1, \"2\"), maybe(sqrt)) #> [[1]] #> [1] 1 #>"},{"path":"/reference/from_just.html","id":null,"dir":"Reference","previous_headings":"","what":"Unwrap a 'Just' value or throw an error — from_just","title":"Unwrap a 'Just' value or throw an error — from_just","text":"Unwrap 'Just' value throw error","code":""},{"path":"/reference/from_just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unwrap a 'Just' value or throw an error — from_just","text":"","code":"from_just(.m)"},{"path":"/reference/from_just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unwrap a 'Just' value or throw an error — from_just","text":".m maybe value","code":""},{"path":"/reference/from_just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unwrap a 'Just' value or throw an error — from_just","text":"unwrapped 'Just' value","code":""},{"path":"/reference/from_just.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unwrap a 'Just' value or throw an error — from_just","text":"","code":"just(1) %>% from_just() #> [1] 1"},{"path":"/reference/is_just.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a 'Just' value — is_just","title":"Check if an object is a 'Just' value — is_just","text":"Check object 'Just' value","code":""},{"path":"/reference/is_just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a 'Just' value — is_just","text":"","code":"is_just(a)"},{"path":"/reference/is_just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a 'Just' value — is_just","text":"Object check","code":""},{"path":"/reference/is_just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a 'Just' value — is_just","text":"TRUE FALSE","code":""},{"path":"/reference/is_just.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a 'Just' value — is_just","text":"","code":"is_just(1) #> [1] FALSE is_just(just(1)) #> [1] TRUE is_just(nothing()) #> [1] FALSE"},{"path":"/reference/is_maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a maybe value — is_maybe","title":"Check if an object is a maybe value — is_maybe","text":"Check object maybe value","code":""},{"path":"/reference/is_maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a maybe value — is_maybe","text":"","code":"is_maybe(a)"},{"path":"/reference/is_maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a maybe value — is_maybe","text":"Object check","code":""},{"path":"/reference/is_maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a maybe value — is_maybe","text":"TRUE FALSE","code":""},{"path":"/reference/is_maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a maybe value — is_maybe","text":"","code":"is_maybe(1) #> [1] FALSE is_maybe(just(1)) #> [1] TRUE is_maybe(nothing()) #> [1] TRUE"},{"path":"/reference/is_nothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a 'Nothing' value — is_nothing","title":"Check if an object is a 'Nothing' value — is_nothing","text":"Check object 'Nothing' value","code":""},{"path":"/reference/is_nothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a 'Nothing' value — is_nothing","text":"","code":"is_nothing(a)"},{"path":"/reference/is_nothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a 'Nothing' value — is_nothing","text":"Object check","code":""},{"path":"/reference/is_nothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a 'Nothing' value — is_nothing","text":"TRUE FALSE","code":""},{"path":"/reference/is_nothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a 'Nothing' value — is_nothing","text":"","code":"is_nothing(1) #> [1] FALSE is_nothing(just(1)) #> [1] FALSE is_nothing(nothing()) #> [1] TRUE"},{"path":"/reference/just.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'Just' variant of a maybe value — just","title":"Create a 'Just' variant of a maybe value — just","text":"Create 'Just' variant maybe value","code":""},{"path":"/reference/just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'Just' variant of a maybe value — just","text":"","code":"just(a)"},{"path":"/reference/just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'Just' variant of a maybe value — just","text":"value wrap 'Just' container","code":""},{"path":"/reference/just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'Just' variant of a maybe value — just","text":"'Just' variant maybe value","code":""},{"path":"/reference/just.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'Just' variant of a maybe value — just","text":"","code":"just(1) #> Just #> [1] 1 just(\"hello\") #> Just #> [1] \"hello\""},{"path":"/reference/maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a function to return a maybe value — maybe","title":"Modify a function to return a maybe value — maybe","text":"Wrapping function maybe modify return maybe value. function normally return error warning modified function return 'Nothing' value, otherwise return 'Just' value. predicate function provided parameter ensure, predicate returns TRUE evaluated return value function, 'Just' value returned modified function, otherwise return 'Nothing' value.","code":""},{"path":"/reference/maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a function to return a maybe value — maybe","text":"","code":"maybe(.f, ensure = function(a) TRUE, allow_warning = FALSE)"},{"path":"/reference/maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a function to return a maybe value — maybe","text":".f function modify ensure predicate function allow_warning Whether warnings result 'Nothing' values","code":""},{"path":"/reference/maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a function to return a maybe value — maybe","text":"function returns maybe values","code":""},{"path":"/reference/maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a function to return a maybe value — maybe","text":"","code":"maybe(mean)(1:10) #> Just #> [1] 5.5 maybe(mean, allow_warning = TRUE)(\"hello\") #> Warning: argument is not numeric or logical: returning NA #> Just #> [1] NA maybe(sqrt)(\"hello\") #> Nothing maybe(sqrt, ensure = not_infinite)(-1) #> Nothing"},{"path":"/reference/maybe_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a maybe value contains a specific value — maybe_contains","title":"Check if a maybe value contains a specific value — maybe_contains","text":"maybe value 'Nothing' variant FALSE returned. 'Just' variant contents unwrapped compared value argument using base::identical.","code":""},{"path":"/reference/maybe_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a maybe value contains a specific value — maybe_contains","text":"","code":"maybe_contains(.m, value)"},{"path":"/reference/maybe_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a maybe value contains a specific value — maybe_contains","text":".m maybe value value value check","code":""},{"path":"/reference/maybe_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a maybe value contains a specific value — maybe_contains","text":"TRUE FALSE","code":""},{"path":"/reference/maybe_contains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a maybe value contains a specific value — maybe_contains","text":"","code":"just(1) %>% maybe_contains(1) #> [1] TRUE just(\"a\") %>% maybe_contains(1) #> [1] FALSE nothing() %>% maybe_contains(1) #> [1] FALSE"},{"path":"/reference/maybe_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two maybe values are equal — maybe_equal","title":"Check if two maybe values are equal — maybe_equal","text":"values 'Nothing' variants values 'Just' variants identical contents TRUE returned, otherwise FALSE.","code":""},{"path":"/reference/maybe_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two maybe values are equal — maybe_equal","text":"","code":"maybe_equal(.m1, .m2)"},{"path":"/reference/maybe_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two maybe values are equal — maybe_equal","text":".m1 maybe value .m2 maybe value","code":""},{"path":"/reference/maybe_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two maybe values are equal — maybe_equal","text":"TRUE FALSE","code":""},{"path":"/reference/maybe_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if two maybe values are equal — maybe_equal","text":"","code":"maybe_equal(just(1), just(1)) #> [1] TRUE maybe_equal(just(1), just(2)) #> [1] FALSE maybe_equal(nothing(), nothing()) #> [1] TRUE"},{"path":"/reference/maybe_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a nested maybe value — maybe_flatten","title":"Flatten a nested maybe value — maybe_flatten","text":"Flatten nested maybe value","code":""},{"path":"/reference/maybe_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a nested maybe value — maybe_flatten","text":"","code":"maybe_flatten(.m)  join(.m)"},{"path":"/reference/maybe_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a nested maybe value — maybe_flatten","text":".m maybe value","code":""},{"path":"/reference/maybe_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a nested maybe value — maybe_flatten","text":"maybe value","code":""},{"path":"/reference/maybe_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a nested maybe value — maybe_flatten","text":"","code":"just(just(1)) %>% maybe_flatten() #> Just #> [1] 1 just(nothing()) %>% maybe_flatten() #> Nothing just(1) %>% maybe_flatten() #> Just #> [1] 1 nothing() %>% maybe_flatten() #> Nothing"},{"path":"/reference/maybe_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a function on a maybe value — maybe_map","title":"Evaluate a function on a maybe value — maybe_map","text":"Evaluate function maybe value","code":""},{"path":"/reference/maybe_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a function on a maybe value — maybe_map","text":"","code":"maybe_map(.m, .f, ...)  fmap(.m, .f, ...)"},{"path":"/reference/maybe_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a function on a maybe value — maybe_map","text":".m maybe value .f function apply maybe value ... Named arguments function .f","code":""},{"path":"/reference/maybe_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a function on a maybe value — maybe_map","text":"maybe value","code":""},{"path":"/reference/maybe_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a function on a maybe value — maybe_map","text":"","code":"just(9) %>% maybe_map(sqrt) #> Just #> [1] 3 nothing() %>% maybe_map(sqrt) #> Nothing"},{"path":"/reference/not_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector or data frame is empty — not_empty","title":"Check if a vector or data frame is empty — not_empty","text":"Check vector data frame empty","code":""},{"path":"/reference/not_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector or data frame is empty — not_empty","text":"","code":"not_empty(a)"},{"path":"/reference/not_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector or data frame is empty — not_empty","text":"Object check","code":""},{"path":"/reference/not_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector or data frame is empty — not_empty","text":"TRUE FALSE","code":""},{"path":"/reference/not_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector or data frame is empty — not_empty","text":"","code":"not_empty(integer()) #> [1] FALSE not_empty(list()) #> [1] FALSE not_empty(1:10) #> [1] TRUE not_empty(data.frame()) #> [1] FALSE not_empty(data.frame(a = 1:10)) #> [1] TRUE"},{"path":"/reference/not_infinite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is not infinite — not_infinite","title":"Check if an object is not infinite — not_infinite","text":"Check object infinite","code":""},{"path":"/reference/not_infinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is not infinite — not_infinite","text":"","code":"not_infinite(a)"},{"path":"/reference/not_infinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is not infinite — not_infinite","text":"Object check","code":""},{"path":"/reference/not_infinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is not infinite — not_infinite","text":"TRUE FALSE","code":""},{"path":"/reference/not_infinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is not infinite — not_infinite","text":"","code":"not_infinite(Inf) #> [1] FALSE not_infinite(1) #> [1] TRUE"},{"path":"/reference/not_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is not NA — not_na","title":"Check if an object is not NA — not_na","text":"Check object NA","code":""},{"path":"/reference/not_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is not NA — not_na","text":"","code":"not_na(a)"},{"path":"/reference/not_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is not NA — not_na","text":"Object check","code":""},{"path":"/reference/not_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is not NA — not_na","text":"TRUE FALSE","code":""},{"path":"/reference/not_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is not NA — not_na","text":"","code":"not_na(NA) #> [1] FALSE not_na(1) #> [1] TRUE"},{"path":"/reference/not_nan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is not NaN — not_nan","title":"Check if an object is not NaN — not_nan","text":"Check object NaN","code":""},{"path":"/reference/not_nan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is not NaN — not_nan","text":"","code":"not_nan(a)"},{"path":"/reference/not_nan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is not NaN — not_nan","text":"Object check","code":""},{"path":"/reference/not_nan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is not NaN — not_nan","text":"TRUE FALSE","code":""},{"path":"/reference/not_nan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is not NaN — not_nan","text":"","code":"not_nan(NaN) #> [1] FALSE not_nan(1) #> [1] TRUE"},{"path":"/reference/not_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is not NULL — not_null","title":"Check if an object is not NULL — not_null","text":"Check object NULL","code":""},{"path":"/reference/not_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is not NULL — not_null","text":"","code":"not_null(a)"},{"path":"/reference/not_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is not NULL — not_null","text":"Object check","code":""},{"path":"/reference/not_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is not NULL — not_null","text":"TRUE FALSE","code":""},{"path":"/reference/not_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is not NULL — not_null","text":"","code":"not_null(NULL) #> [1] FALSE not_null(1) #> [1] TRUE"},{"path":"/reference/not_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is not undefined — not_undefined","title":"Check if an object is not undefined — not_undefined","text":"case 'undefined' values include NULL, NaN, NA variants, infinite values.","code":""},{"path":"/reference/not_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is not undefined — not_undefined","text":"","code":"not_undefined(a)"},{"path":"/reference/not_undefined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is not undefined — not_undefined","text":"Object check","code":""},{"path":"/reference/not_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is not undefined — not_undefined","text":"TRUE FALSE","code":""},{"path":"/reference/not_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is not undefined — not_undefined","text":"","code":"not_undefined(NA) #> [1] FALSE not_undefined(NULL) #> [1] FALSE not_undefined(1) #> [1] TRUE"},{"path":"/reference/nothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'Nothing' variant of a maybe value — nothing","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"Create 'Nothing' variant maybe value","code":""},{"path":"/reference/nothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"","code":"nothing()"},{"path":"/reference/nothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"'Nothing' variant maybe value","code":""},{"path":"/reference/nothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"","code":"nothing() #> Nothing"},{"path":"/reference/or.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine predicate functions to check if any are TRUE — or","title":"Combine predicate functions to check if any are TRUE — or","text":"Combine predicate functions check TRUE","code":""},{"path":"/reference/or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine predicate functions to check if any are TRUE — or","text":"","code":"or(...)"},{"path":"/reference/or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine predicate functions to check if any are TRUE — or","text":"... Predicate functions","code":""},{"path":"/reference/or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine predicate functions to check if any are TRUE — or","text":"predicate function","code":""},{"path":"/reference/or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine predicate functions to check if any are TRUE — or","text":"","code":"or(not_null, not_na)(1) #> [1] TRUE or(not_null, not_na)(NULL) #> [1] TRUE"},{"path":"/reference/perhaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a function to return the value or a default value — perhaps","title":"Modify a function to return the value or a default value — perhaps","text":"Wrapping function perhaps modify return expected value default value circumstances. function normally return error warning modified function return default value, otherwise return expected value. predicate function provided parameter ensure, predicate returns TRUE evaluated return value function, expected value returned modified function, otherwise return default value.","code":""},{"path":"/reference/perhaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a function to return the value or a default value — perhaps","text":"","code":"perhaps(.f, default, ensure = function(a) TRUE, allow_warning = FALSE)"},{"path":"/reference/perhaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a function to return the value or a default value — perhaps","text":".f function modify default default value ensure predicate function allow_warning Whether warnings result default value","code":""},{"path":"/reference/perhaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a function to return the value or a default value — perhaps","text":"function returns expected value default value","code":""},{"path":"/reference/perhaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a function to return the value or a default value — perhaps","text":"","code":"perhaps(mean, default = 0)(1:10) #> [1] 5.5 perhaps(mean, default = 0, allow_warning = TRUE)(\"hello\") #> Warning: argument is not numeric or logical: returning NA #> [1] NA perhaps(sqrt, default = 0)(\"hello\") #> [1] 0 perhaps(sqrt, default = 0, ensure = not_infinite)(-1) #> [1] 0"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/with_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Unwrap a maybe value or return a default — with_default","title":"Unwrap a maybe value or return a default — with_default","text":"Unwrap maybe value return default","code":""},{"path":"/reference/with_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unwrap a maybe value or return a default — with_default","text":"","code":"with_default(.m, default)  from_maybe(.m, default)"},{"path":"/reference/with_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unwrap a maybe value or return a default — with_default","text":".m maybe value default default value return maybe value 'Nothing'","code":""},{"path":"/reference/with_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unwrap a maybe value or return a default — with_default","text":"unwrapped maybe value default value","code":""},{"path":"/reference/with_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unwrap a maybe value or return a default — with_default","text":"","code":"just(1) %>% with_default(default = 0) #> [1] 1 nothing() %>% with_default(default = 0) #> [1] 0"},{"path":"/news/index.html","id":"maybe-021","dir":"Changelog","previous_headings":"","what":"maybe 0.2.1","title":"maybe 0.2.1","text":"CRAN release: 2022-03-11 Internal changes Now doesn’t require R >= 4.1","code":""},{"path":"/news/index.html","id":"maybe-020","dir":"Changelog","previous_headings":"","what":"maybe 0.2.0","title":"maybe 0.2.0","text":"CRAN release: 2022-02-11 Major breaking changes Function named map_maybe changed maybe_map Function named flatten_maybe changed maybe_flatten Features maybe_contains checks maybe value contains specific value maybe_equal checks two maybe values identical","code":""},{"path":"/news/index.html","id":"maybe-010","dir":"Changelog","previous_headings":"","what":"maybe 0.1.0","title":"maybe 0.1.0","text":"CRAN release: 2022-01-27 Initial version","code":""}]
