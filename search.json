[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 maybe authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McNeil. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McNeil (2022). maybe: Maybe Monad R. R package version 0.0.0.9000.","code":"@Manual{,   title = {maybe: The Maybe Monad in R},   author = {Andrew McNeil},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Maybe Monad in R","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"armcn/maybe\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"The Maybe Monad in R","text":"Maybe values can used model computations may fail undefined outputs. example, dividing zero mathematically undefined many programming languages, including R, return infinity. can cause unexpected problems later program. can use maybe value make safe divide function. time 2 / 2 returns Just 1 2 / 0 returns Nothing. two possibly values maybe value. can Just value, can Nothing (absence value). maybe value used another function, first need specify happen function returns Nothing. can done using with_default function. function return value contained Just, Nothing return default. Think maybe value container. container can Just value Nothing. use contained value regular R functions need unwrap first. gets interesting chain maybe values together. Instead use with_default every time use function produces maybe values, can chained with_default needs called end. example, may want divide two numbers get absolute value result. accomplished map_maybe function. map_maybe, often called fmap languages, reaches maybe value, applies function value, re-wraps result maybe. input Just value, return value map_maybe also Just. Nothing return value Nothing. wanted chain multiple “safe” functions (functions return maybe values) together? use and_then. function often called bind languages. First let’s define two “safe” functions call one . Functions can also converted “safe” functions another way. Instead rewriting function can wrap function maybe. modify function return Nothing error warning can optionally provide predicate function (function returns TRUE FALSE) assert something result. example functions made “safe” maybe function. automatically capture errors warnings return Nothing. Warnings can allowed setting allow_warnings = TRUE. pattern wrapping function maybe function setting default value common shortcut, perhaps. default value set default parameter. function always return regular R values, maybes. can combine multiple predicates /functions. use predefined combinations like not_undefined checks output NULL, NA, NaN, -Inf, Inf. names map_maybe, and_then, flatten_maybe, with_default different traditional function names FP languages. believe names clearly articulate purpose functions aliases provided. single project please choose use one set , . fmap == map_maybe join == flatten_maybe bind == and_then from_maybe == with_default","code":"library(maybe)  safe_divide <- function(a, b) {   if (b == 0) nothing() else just(a / b) }  2 / 2 #> [1] 1 safe_divide(2, 2) #> Just #> [1] 1  2 / 0 #> [1] Inf safe_divide(2, 0) #> Nothing safe_divide(2, 2) #> Just #> [1] 1 safe_divide(2, 2) |> with_default(0) #> [1] 1  safe_divide(2, 0) #> Nothing safe_divide(2, 0) |> with_default(0) #> [1] 0 safe_divide(-2, 2) #> Just #> [1] -1 safe_divide(-2, 2) |> map_maybe(abs) #> Just #> [1] 1  safe_divide(-2, 0) #> Nothing safe_divide(-2, 0) |> map_maybe(abs) #> Nothing safe_mean <- function(a) {   if (length(a) == 0L) nothing() else just(mean(a)) }  safe_sqrt <- function(a) {   if (a == -1) nothing() else just(sqrt(a)) }  safe_mean(1:10) |> and_then(safe_sqrt) #> Just #> [1] 2.345208 safe_mean <- maybe(mean, ensure = not_nan) safe_sqrt <- maybe(sqrt, ensure = not_infinite)  safe_mean(\"hello\") |> and_then(safe_sqrt) #> Nothing safe_mean(1:10) |> and_then(safe_sqrt) #> Just #> [1] 2.345208 safe_mean <- maybe(mean)  safe_mean(1:10) #> Just #> [1] 5.5 safe_mean(\"hello\") #> Nothing  safe_mean <- maybe(mean, allow_warning = TRUE)  safe_mean(\"hello\") #> Warning in mean.default(...): argument is not numeric or logical: returning NA #> Just #> [1] NA safe_mean <- perhaps(mean, default = 0)  safe_mean(1:10) #> [1] 5.5 safe_mean(\"hello\") #> [1] 0 safe_mean <- maybe(mean, ensure = and(not_nan, not_empty))  safe_mean(1:10) #> Just #> [1] 5.5 safe_mean <- maybe(mean, ensure = not_undefined)  safe_mean(c(1, 2, 3)) #> Just #> [1] 2 safe_mean(c(NA, 2, 3)) #> Nothing"},{"path":"/reference/and.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine predicate functions with && — and","title":"Combine predicate functions with && — and","text":"Combine predicate functions &&","code":""},{"path":"/reference/and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine predicate functions with && — and","text":"","code":"and(...)"},{"path":"/reference/and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine predicate functions with && — and","text":"... Predicate functions","code":""},{"path":"/reference/and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine predicate functions with && — and","text":"predicate function","code":""},{"path":"/reference/and.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine predicate functions with && — and","text":"","code":"and(not_null, not_na)(1) #> [1] TRUE and(not_null, not_na)(NULL) #> [1] FALSE"},{"path":"/reference/and_then.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a maybe returning function on a maybe value — and_then","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"Evaluate maybe returning function maybe value","code":""},{"path":"/reference/and_then.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"","code":"and_then(.m, .f, ...)  bind(.m, .f, ...)"},{"path":"/reference/and_then.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a maybe returning function on a maybe value — and_then","text":".m maybe value .f maybe returning function apply maybe value ... Named arguments function .f","code":""},{"path":"/reference/and_then.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"maybe value","code":""},{"path":"/reference/and_then.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a maybe returning function on a maybe value — and_then","text":"","code":"safe_sqrt <- maybe(sqrt, ensure = not_infinite)  just(9) |> and_then(safe_sqrt) #> Just #> [1] 3 just(-1) |> and_then(safe_sqrt) #> Nothing nothing() |> and_then(safe_sqrt) #> Nothing"},{"path":"/reference/flatten_maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a nested maybe value — flatten_maybe","title":"Flatten a nested maybe value — flatten_maybe","text":"Flatten nested maybe value","code":""},{"path":"/reference/flatten_maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a nested maybe value — flatten_maybe","text":"","code":"flatten_maybe(.m)  join(.m)"},{"path":"/reference/flatten_maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a nested maybe value — flatten_maybe","text":".m maybe value","code":""},{"path":"/reference/flatten_maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a nested maybe value — flatten_maybe","text":"maybe value","code":""},{"path":"/reference/flatten_maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a nested maybe value — flatten_maybe","text":"","code":"just(just(1)) |> flatten_maybe() #> Just #> [1] 1 just(nothing()) |> flatten_maybe() #> Nothing just(1) |> flatten_maybe() #> Just #> [1] 1 nothing() |> flatten_maybe() #> Nothing"},{"path":"/reference/is_just.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a just value — is_just","title":"Check if an object is a just value — is_just","text":"Check object just value","code":""},{"path":"/reference/is_just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a just value — is_just","text":"","code":"is_just(a)"},{"path":"/reference/is_just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a just value — is_just","text":"Object check","code":""},{"path":"/reference/is_just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a just value — is_just","text":"TRUE FALSE","code":""},{"path":"/reference/is_just.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a just value — is_just","text":"","code":"is_just(1) #> [1] FALSE is_just(just(1)) #> [1] TRUE is_just(nothing()) #> [1] FALSE"},{"path":"/reference/is_maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a maybe value — is_maybe","title":"Check if an object is a maybe value — is_maybe","text":"Check object maybe value","code":""},{"path":"/reference/is_maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a maybe value — is_maybe","text":"","code":"is_maybe(a)"},{"path":"/reference/is_maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a maybe value — is_maybe","text":"Object check","code":""},{"path":"/reference/is_maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a maybe value — is_maybe","text":"TRUE FALSE","code":""},{"path":"/reference/is_maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a maybe value — is_maybe","text":"","code":"is_maybe(1) #> [1] FALSE is_maybe(just(1)) #> [1] TRUE is_maybe(nothing()) #> [1] TRUE"},{"path":"/reference/is_nothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a nothing value — is_nothing","title":"Check if an object is a nothing value — is_nothing","text":"Check object nothing value","code":""},{"path":"/reference/is_nothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a nothing value — is_nothing","text":"","code":"is_nothing(a)"},{"path":"/reference/is_nothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a nothing value — is_nothing","text":"Object check","code":""},{"path":"/reference/is_nothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a nothing value — is_nothing","text":"TRUE FALSE","code":""},{"path":"/reference/is_nothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a nothing value — is_nothing","text":"","code":"is_nothing(1) #> [1] FALSE is_nothing(just(1)) #> [1] FALSE is_nothing(nothing()) #> [1] TRUE"},{"path":"/reference/just.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'Just' variant of a maybe value — just","title":"Create a 'Just' variant of a maybe value — just","text":"Create 'Just' variant maybe value","code":""},{"path":"/reference/just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'Just' variant of a maybe value — just","text":"","code":"just(a)"},{"path":"/reference/just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'Just' variant of a maybe value — just","text":"value wrap 'Just'","code":""},{"path":"/reference/just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'Just' variant of a maybe value — just","text":"'Just' variant maybe value","code":""},{"path":"/reference/just.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'Just' variant of a maybe value — just","text":"","code":"just(1) #> Just #> [1] 1 just(\"hello\") #> Just #> [1] \"hello\""},{"path":"/reference/map_maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a function on a maybe value — map_maybe","title":"Evaluate a function on a maybe value — map_maybe","text":"Evaluate function maybe value","code":""},{"path":"/reference/map_maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a function on a maybe value — map_maybe","text":"","code":"map_maybe(.m, .f, ...)  fmap(.m, .f, ...)"},{"path":"/reference/map_maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a function on a maybe value — map_maybe","text":".m maybe value .f function apply maybe value ... Named arguments function .f","code":""},{"path":"/reference/map_maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a function on a maybe value — map_maybe","text":"maybe value","code":""},{"path":"/reference/map_maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a function on a maybe value — map_maybe","text":"","code":"just(9) |> map_maybe(sqrt) #> Just #> [1] 3 nothing() |> map_maybe(sqrt) #> Nothing"},{"path":"/reference/maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a function to return a maybe value — maybe","title":"Modify a function to return a maybe value — maybe","text":"Wrapping function maybe modify return maybe value. function normally return error warning modified function return 'Nothing' value, otherwise return 'Just' value. predicate function provided parameter ensure, predicate returns FALSE called return value function, 'Nothing' value returned modified function, otherwise return 'Just' value.","code":""},{"path":"/reference/maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a function to return a maybe value — maybe","text":"","code":"maybe(.f, allow_warning = FALSE, ensure = function(a) TRUE)"},{"path":"/reference/maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a function to return a maybe value — maybe","text":".f function modify allow_warning Whether warnings result 'Nothing' values ensure predicate function","code":""},{"path":"/reference/maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a function to return a maybe value — maybe","text":"function returns maybe values","code":""},{"path":"/reference/maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a function to return a maybe value — maybe","text":"","code":"maybe(mean)(1:10) #> Just #> [1] 5.5 maybe(mean, allow_warning = FALSE)(\"hello\") #> Nothing maybe(sqrt)(\"hello\") #> Nothing maybe(sqrt, ensure = not_infinite)(-1) #> Nothing"},{"path":"/reference/not_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector or data frame is empty — not_empty","title":"Check if a vector or data frame is empty — not_empty","text":"Check vector data frame empty","code":""},{"path":"/reference/not_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector or data frame is empty — not_empty","text":"","code":"not_empty(a)"},{"path":"/reference/not_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector or data frame is empty — not_empty","text":"Object check","code":""},{"path":"/reference/not_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector or data frame is empty — not_empty","text":"TRUE FALSE","code":""},{"path":"/reference/not_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector or data frame is empty — not_empty","text":"","code":"not_empty(integer()) #> [1] FALSE not_empty(list()) #> [1] FALSE not_empty(1:10) #> [1] TRUE not_empty(data.frame()) #> [1] FALSE not_empty(data.frame(a = 1:10)) #> [1] TRUE"},{"path":"/reference/not_infinite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is infinite — not_infinite","title":"Check if an object is infinite — not_infinite","text":"Check object infinite","code":""},{"path":"/reference/not_infinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is infinite — not_infinite","text":"","code":"not_infinite(a)"},{"path":"/reference/not_infinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is infinite — not_infinite","text":"Object check","code":""},{"path":"/reference/not_infinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is infinite — not_infinite","text":"TRUE FALSE","code":""},{"path":"/reference/not_infinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is infinite — not_infinite","text":"","code":"not_infinite(Inf) #> [1] FALSE not_infinite(1) #> [1] TRUE"},{"path":"/reference/not_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is NA — not_na","title":"Check if an object is NA — not_na","text":"Check object NA","code":""},{"path":"/reference/not_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is NA — not_na","text":"","code":"not_na(a)"},{"path":"/reference/not_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is NA — not_na","text":"Object check","code":""},{"path":"/reference/not_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is NA — not_na","text":"TRUE FALSE","code":""},{"path":"/reference/not_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is NA — not_na","text":"","code":"not_na(NA) #> [1] FALSE not_na(1) #> [1] TRUE"},{"path":"/reference/not_nan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is NaN — not_nan","title":"Check if an object is NaN — not_nan","text":"Check object NaN","code":""},{"path":"/reference/not_nan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is NaN — not_nan","text":"","code":"not_nan(a)"},{"path":"/reference/not_nan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is NaN — not_nan","text":"Object check","code":""},{"path":"/reference/not_nan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is NaN — not_nan","text":"TRUE FALSE","code":""},{"path":"/reference/not_nan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is NaN — not_nan","text":"","code":"not_nan(NaN) #> [1] FALSE not_nan(1) #> [1] TRUE"},{"path":"/reference/not_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is NULL — not_null","title":"Check if an object is NULL — not_null","text":"Check object NULL","code":""},{"path":"/reference/not_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is NULL — not_null","text":"","code":"not_null(a)"},{"path":"/reference/not_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is NULL — not_null","text":"Object check","code":""},{"path":"/reference/not_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is NULL — not_null","text":"TRUE FALSE","code":""},{"path":"/reference/not_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is NULL — not_null","text":"","code":"not_null(NULL) #> [1] FALSE not_null(1) #> [1] TRUE"},{"path":"/reference/not_undefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is undefined — not_undefined","title":"Check if an object is undefined — not_undefined","text":"case 'undefined' values include NULL, NaN, NA variants, infinite values.","code":""},{"path":"/reference/not_undefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is undefined — not_undefined","text":"","code":"not_undefined(a)"},{"path":"/reference/not_undefined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is undefined — not_undefined","text":"Object check","code":""},{"path":"/reference/not_undefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is undefined — not_undefined","text":"TRUE FALSE","code":""},{"path":"/reference/not_undefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is undefined — not_undefined","text":"","code":"not_undefined(NA) #> [1] FALSE not_undefined(NULL) #> [1] FALSE not_undefined(1) #> [1] TRUE"},{"path":"/reference/nothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'Nothing' variant of a maybe value — nothing","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"Create 'Nothing' variant maybe value","code":""},{"path":"/reference/nothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"","code":"nothing()"},{"path":"/reference/nothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"'Nothing' variant maybe value","code":""},{"path":"/reference/nothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'Nothing' variant of a maybe value — nothing","text":"","code":"nothing() #> Nothing"},{"path":"/reference/or.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine predicate functions with || — or","title":"Combine predicate functions with || — or","text":"Combine predicate functions ||","code":""},{"path":"/reference/or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine predicate functions with || — or","text":"","code":"or(...)"},{"path":"/reference/or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine predicate functions with || — or","text":"... Predicate functions","code":""},{"path":"/reference/or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine predicate functions with || — or","text":"predicate function","code":""},{"path":"/reference/or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine predicate functions with || — or","text":"","code":"or(not_null, not_na)(1) #> [1] TRUE or(not_null, not_na)(NULL) #> [1] TRUE"},{"path":"/reference/perhaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a function to return the value or a default value — perhaps","title":"Modify a function to return the value or a default value — perhaps","text":"Wrapping function perhaps modify return expected value default value circumstances. function normally return error warning modified function return default value, otherwise return expected value. predicate function provided parameter ensure, predicate returns FALSE called return value function, default value returned modified function, otherwise return expected value.","code":""},{"path":"/reference/perhaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a function to return the value or a default value — perhaps","text":"","code":"perhaps(.f, default, allow_warning = FALSE, ensure = function(a) TRUE)"},{"path":"/reference/perhaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a function to return the value or a default value — perhaps","text":".f function modify default default value allow_warning Whether warnings result default value ensure predicate function","code":""},{"path":"/reference/perhaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a function to return the value or a default value — perhaps","text":"function returns expected value default value","code":""},{"path":"/reference/perhaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a function to return the value or a default value — perhaps","text":"","code":"perhaps(mean, default = 0)(1:10) #> [1] 5.5 perhaps(mean, default = 0, allow_warning = TRUE)(\"hello\") #> Warning: argument is not numeric or logical: returning NA #> [1] NA perhaps(sqrt, default = 0)(\"hello\") #> [1] 0 perhaps(sqrt, default = 0, ensure = not_infinite)(-1) #> [1] 0"},{"path":"/reference/with_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Unwrap a maybe value and return a default for 'Nothing' — with_default","title":"Unwrap a maybe value and return a default for 'Nothing' — with_default","text":"Unwrap maybe value return default 'Nothing'","code":""},{"path":"/reference/with_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unwrap a maybe value and return a default for 'Nothing' — with_default","text":"","code":"with_default(.m, default)  from_maybe(.m, default)"},{"path":"/reference/with_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unwrap a maybe value and return a default for 'Nothing' — with_default","text":".m maybe value default default value return maybe value 'Nothing'","code":""},{"path":"/reference/with_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unwrap a maybe value and return a default for 'Nothing' — with_default","text":"unwrapped maybe value default value","code":""},{"path":"/reference/with_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unwrap a maybe value and return a default for 'Nothing' — with_default","text":"","code":"just(1) |> with_default(default = 0) #> [1] 1 nothing() |> with_default(default = 0) #> [1] 0"}]
